# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UserLoginWnd_new.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QStringListModel


class Ui_UserLoginWnd(object):
    def setupUi(self, UserLoginWnd):
        UserLoginWnd.setObjectName("UserLoginWnd")
        UserLoginWnd.resize(961, 794)
        self.listToPlay = QtWidgets.QListView(UserLoginWnd)
        # self.listToPlay = QtWidgets.QListWidget(UserLoginWnd)
        self.listToPlay.setGeometry(QtCore.QRect(40, 170, 431, 601))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(14)
        self.listToPlay.setFont(font)
        self.listToPlay.setObjectName("listToPlay")
        self.label = QtWidgets.QLabel(UserLoginWnd)
        self.label.setGeometry(QtCore.QRect(140, 20, 221, 41))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.textEdit = QtWidgets.QTextEdit(UserLoginWnd)
        self.textEdit.setGeometry(QtCore.QRect(360, 20, 221, 41))
        self.textEdit.setObjectName("textEdit")
        self.listHistory = QtWidgets.QListView(UserLoginWnd)
        self.listHistory.setGeometry(QtCore.QRect(510, 170, 411, 601))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(14)
        self.listHistory.setFont(font)
        self.listHistory.setObjectName("listHistory")
        self.label_2 = QtWidgets.QLabel(UserLoginWnd)
        self.label_2.setGeometry(QtCore.QRect(670, 130, 121, 51))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(UserLoginWnd)
        self.label_3.setGeometry(QtCore.QRect(180, 130, 151, 51))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(16)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.Query = QtWidgets.QPushButton(UserLoginWnd)
        self.Query.setGeometry(QtCore.QRect(630, 20, 141, 41))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(20)
        self.Query.setFont(font)
        self.Query.setObjectName("Query")
        self.Share = QtWidgets.QPushButton(UserLoginWnd)
        self.Share.setGeometry(QtCore.QRect(760, 90, 141, 41))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(20)
        self.Share.setFont(font)
        self.Share.setObjectName("Share")
        self.Comment = QtWidgets.QPushButton(UserLoginWnd)
        self.Comment.setGeometry(QtCore.QRect(280, 90, 141, 41))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(20)
        self.Comment.setFont(font)
        self.Comment.setObjectName("Comment")
        self.Praise = QtWidgets.QPushButton(UserLoginWnd)
        self.Praise.setGeometry(QtCore.QRect(50, 90, 141, 41))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(20)
        self.Praise.setFont(font)
        self.Praise.setObjectName("Praise")
        self.Coin = QtWidgets.QPushButton(UserLoginWnd)
        self.Coin.setGeometry(QtCore.QRect(510, 90, 141, 41))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(20)
        self.Coin.setFont(font)
        self.Coin.setObjectName("Coin")

        self.retranslateUi(UserLoginWnd)
        self.Query.clicked.connect(self.OnQuery) # type: ignore
        self.Praise.clicked.connect(self.OnPraise) # type: ignore
        self.Comment.clicked.connect(self.OnComment) # type: ignore
        self.Share.clicked.connect(self.OnShare) # type: ignore
        self.Coin.clicked.connect(self.OnCoin) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(UserLoginWnd)

        self.listToPlay.clicked.connect(self.checkPlayItem)
        self.listHistory.clicked.connect(self.checkHistoryItem)

        self.model_play = QStringListModel()
        self.model_history = QStringListModel()

    def retranslateUi(self, UserLoginWnd):
        _translate = QtCore.QCoreApplication.translate
        UserLoginWnd.setWindowTitle(_translate("UserLoginWnd", "用户测试"))
        self.label.setText(_translate("UserLoginWnd", "请输入用户 uid："))
        self.label_2.setText(_translate("UserLoginWnd", "历史记录"))
        self.label_3.setText(_translate("UserLoginWnd", "待播放视频"))
        self.Query.setText(_translate("UserLoginWnd", "查询"))
        self.Share.setText(_translate("UserLoginWnd", "分享"))
        self.Comment.setText(_translate("UserLoginWnd", "评论"))
        self.Praise.setText(_translate("UserLoginWnd", "点赞"))
        self.Coin.setText(_translate("UserLoginWnd", "投币"))

    def OnQuery(self):
        from GlobalVariable import global_obj

        self.query_uid = int(self.textEdit.toPlainText())
        self.cur_user = global_obj.GlobalUserList[self.query_uid]

        self.cur_user.HelpRefreshWeight()
        self.cur_user.RefreshWeight()

        self.playItems = []  # 先清空
        self.HistoryItems = []  # 先清空

        for i, video in enumerate(self.cur_user.to_play_list):
            self.playItems.extend([str(video[0]) + ' ' + str(global_obj.GlobalVideoList[video[0] - 1].name)])
        self.model_play.setStringList(self.playItems)
        self.listToPlay.setModel(self.model_play)

        # 重构历史视频列表
        for video_uid in self.cur_user.history_list:
            self.HistoryItems.extend([str(video_uid) + ' ' + str(global_obj.GlobalVideoList[video_uid - 1].name)])

        self.model_history.setStringList(self.HistoryItems)
        self.listHistory.setModel(self.model_history)

    def checkPlayItem(self, index):
        # 点击项目表示观看
        video_uid = self.cur_user.to_play_list[index.row()][0]
        from GlobalVariable import global_obj
        video = global_obj.GlobalVideoList[video_uid - 1]
        self.cur_video = video  # 保存起来，用于点赞等操作
        video.watch += 1
        video.user_list.append(self.cur_user.uid)  # 存储已观看用户,不去重
        print('%s 观看数 %d ' % (video.name, video.watch))
        self.HistoryItems.extend([str(video.uid) + ' ' + str(video.name)])  # 临时更改
        self.model_history.setStringList(self.HistoryItems)
        self.cur_user.history_list.append(video_uid)  # 更新数据到用户对象，永久更改

        # 更新权重
        self.cur_user.HelpUpdateInitWeight(video.category)

    def checkHistoryItem(self, index):
        print('选择历史: ', index.row())

    def OnPraise(self):
        video = self.cur_video
        video.like += 1
        print('%s 点赞数： %d' % (video.name, video.like))

    def OnComment(self):
        video = self.cur_video
        video.comment += 1
        print('%s 评论数： %d' % (video.name, video.comment))

    def OnShare(self):
        video = self.cur_video
        video.share += 1
        print('%s 分享数： %d' % (video.name, video.share))

    def OnCoin(self):
        video = self.cur_video
        video.coin += 1
        print('%s 投币数： %d' % (video.name, video.coin))
